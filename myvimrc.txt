" self-defined

syntax on
filetype plugin indent on

set nocompatible
set nu
set showmode
set autoindent

set expandtab
set shiftwidth=2
set softtabstop=2

set fo-=c fo-=r fo-=o

let mapleader = "\<Space>"
nnoremap <leader>ev :vs $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" pathgen
execute pathogen#infect()

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" delimitMate
" inoremap <leader>oo <CR><esc>O<Space><Space>
" nnoremap <leader>oo i<CR><esc>O<Space><Space>

" BreakLine: Return TRUE if in the middle of {} or () in INSERT mode
fun BreakLine()
  if (mode() == 'i')
    return ((getline(".")[col(".")-2] == '{' && getline(".")[col(".")-1] == '}') ||
         \(getline(".")[col(".")-2] == '(' && getline(".")[col(".")-1] == ')'))
  else
    return 0
  endif
endfun

" Remap <Enter> to split the line and insert a new line in between if
" BreakLine return True
inoremap <expr> <CR> BreakLine() ? "<CR><ESC>O" : "<CR>"


" NERD Tree
" autocmd vimenter * NERDTree
nnoremap <leader>t :NERDTreeToggle<CR>

" vim-colors-solarized
syntax enable
set background=dark
" set background=light
let g:solarized_termcolors=256
colorscheme solarized

" tabular
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a- :Tabularize /->\zs<CR>
  vmap <Leader>a- :Tabularize /->\zs<CR>
  nmap <Leader>a; :Tabularize /::\zs<CR>
  vmap <Leader>a; :Tabularize /::\zs<CR>
endif
